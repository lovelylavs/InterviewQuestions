The Challenge
Given a string S and a set of words D, find the longest word in D that is a subsequence of S.

Word W is a subsequence of S if some number of characters, possibly zero, can be deleted from S to form W, without reordering the remaining characters.

Note: D can appear in any format (list, hash table, prefix tree, etc.

For example, given the input of S = "abppplee" and D = {"able", "ale", "apple", "bale", "kangaroo"} the correct output would be "apple"

The words "able" and "ale" are both subsequences of S, but they are shorter than "apple".
The word "bale" is not a subsequence of S because even though S has all the right letters, they are not in the right order.
The word "kangaroo" is the longest word in D, but it isn't a subsequence of S.


```
package algos;

public class DictionarySubSequence {
	public static String longest(String[] dict, String inputString){
	    String retVal ="";
	    for(String s:dict){
	     StringBuffer check =  new StringBuffer();
	     int sIndex=0, inputIndex=0;
	     while(sIndex<s.length() &&inputIndex<inputString.length()){
	       if(s.charAt(sIndex)==inputString.charAt(inputIndex)){
	         check.append(s.charAt(sIndex));
	         sIndex++;
	         inputIndex++;
	       }else{
	         inputIndex++;
	       }
	     }
	     if (check.toString().equals(s)){
	       if(s.length() > retVal.length()){
	        retVal=s; 
	       }
	     }
	    }
	    return retVal;
	  }
	
	public static void main(String[] args){
		String S = "abppplee";
		String[]  D = {"able", "ale", "apple", "bale", "kangaroo"};
		DictionarySubSequence sb = new DictionarySubSequence();
		System.out.println(sb.longest(D, S));
	}
}

```
